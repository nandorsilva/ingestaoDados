---
version: '3'
# Example based on https://github.com/saubury/stream-smarts

services:
  zookeeper:
    image: "confluentinc/cp-zookeeper:${CONF_VER}"
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      TZ: ${TZ_SET}
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: "confluentinc/cp-enterprise-kafka:${CONF_VER}"
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
    # Exposes 9092 for external connections to the broker
    # Use kafka:29092 for connections internal on the docker network
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
      - '9092:9092'
    environment:    
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      CONFLUENT_METRICS_ENABLE: 'false'


  schema-registry:
    image: "confluentinc/cp-schema-registry:${CONF_VER}"
    container_name: schema-registry
    ports:
      - 8081:8081  
    depends_on:
      - zookeeper
      - kafka
    volumes:
      - ./scripts:/scripts    
    environment:     
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_AVRO_COMPATIBILITY_LEVEL: "none"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: "WARN"

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:${KSQLDB_VER}
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - kafka
      - kafka-connect
      - schema-registry
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka:29092
      KSQL_KSQL_CONNECT_URL: http://kafka-connect:8083
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"    
    volumes:
      - ./scripts:/scripts
   


  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:${KSQLDB_VER}
    container_name: ksqldb-cli
    depends_on:
      - kafka
      - ksqldb-server
    volumes:
      - ./scripts:/scripts
    entrypoint: /bin/sh
    tty: true



  kafka-connect:
    container_name: kafka-connect
    image: debezium/connect
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    ports:
      - '8083:8083'
    environment:     
      BOOTSTRAP_SERVERS: "kafka:29092"
      REST_PORT: 8083
      GROUP_ID: compose-connect-group
      CONFIG_STORAGE_TOPIC: docker-connect-configs
      OFFSET_STORAGE_TOPIC: docker-connect-offsets
      STATUS_STORAGE_TOPIC: docker-connect-status
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      REST_ADVERTISED_HOST_NAME: "kafka-connect"
      PLUGIN_PATH: /usr/share/java
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONFLUENT_TOPIC_REPLICATION_FACTOR: 1
    # volumes:
    #   - ./confluentinc-kafka-connect-mqtt:/usr/share/java/confluentinc-kafka-connect-mqtt

  # postgres:
  #  container_name: postgres
  #  image: 'postgres:${PG_VER}'
  #  hostname: postgres
  #  ports:
  #    - "5432:5432"
  #  environment:
  #    TZ: ${TZ_SET}
  #    POSTGRES_USER: postgres
  #    POSTGRES_PASSWORD: ${POSTGRES_SRC_PASSWORD}
  #    POSTGRES_DB: postgres
  # #    PGDATA: /var/lib/postgresql/data/pgdata
  #  volumes:
  #    - ./postgres-setup.sql:/postgres-setup.sql


  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    ports:
     - 1433:1433
    environment:
     - ACCEPT_EULA=Y
     - MSSQL_PID=Standard
     - SA_PASSWORD=Password!
     - MSSQL_AGENT_ENABLED=true